{% macro struct(name, schema) %}
type {{name}} struct {
{% for key, value in schema.properties.iteritems() %}
  {% if value.type == "array" and value.items.pointer_to %}
  {{key | upperCamelCase}} []*{{value.items.pointer_to | upperCamelCase}} `json:"{{key}}"`
  {% elif value.pointer_to %}
  {{key | upperCamelCase}} *{{value.pointer_to | upperCamelCase}} `json:"{{key}}"`
  {%  else %}
  {{key | upperCamelCase}} {{value.type | golangType(value.items)}} `json:"{{key}}"`
  {% endif %}
{% endfor %}
}
{% endmacro %}
package {{ns}}

{% if schema.type == "method" %}
{{struct(name | upperCamelCase + "Params", schema.params)}}
{{struct(name | upperCamelCase + "Result", schema.result)}}
var {{name | upperCamelCase}}ParamsSchema string = `{{schema.origin.params | jsonDumps}}`
{% else %}
{{struct(name | upperCamelCase, schema)}}
{%- endif -%}